package gui;

import data.MinotaursConfig;
import org.dreambot.api.Client;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import org.dreambot.api.script.ScriptManager;
import src.MinotaurKiller;
import sun.font.Script;

public class MinotaurGUI extends JFrame {

    private JTextField foodSource;
    private JTextField baseEatPercentage;
    private JTextField eatPercentageVariance;
    private JComboBox attackStyleSelector;
    private JLabel attackStyleLabel;
    private JButton startButton;
    private JLabel foodSourceLabel;
    private JLabel baseEatLabel;
    private JLabel varianceLabel;
    private JButton exitButton;

    public MinotaurGUI(MinotaurKiller ctx) {

        setTitle("Minotaur Killer Setting");
        setSize(350, 220);
        setLocationRelativeTo(Client.getCanvas());
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel settingPanel = new JPanel();
        settingPanel.setLayout(new GridLayout(0, 2));

        foodSource.setText(MinotaursConfig.getMinoConfig().FOOD_SOURCE);
        baseEatPercentage.setText(String.valueOf(MinotaursConfig.getMinoConfig().EAT_PERCENTAGE_BASE));
        eatPercentageVariance.setText(String.valueOf(MinotaursConfig.getMinoConfig().EAT_PERCENTAGE_VARIANCE));
        attackStyleSelector.setSelectedIndex(1);


        settingPanel.add(foodSourceLabel);
        settingPanel.add(foodSource);

        settingPanel.add(baseEatLabel);
        settingPanel.add(baseEatPercentage);

        settingPanel.add(varianceLabel);
        settingPanel.add(eatPercentageVariance);


        settingPanel.add(attackStyleLabel);
        settingPanel.add(attackStyleSelector);

        settingPanel.add(startButton);
        settingPanel.add(exitButton);

        attackStyleSelector.addActionListener(e ->  {
            MinotaursConfig.getMinoConfig().setAttackStyle(attackStyleSelector.getSelectedItem().toString());
        });

        startButton.addActionListener(e -> {
            MinotaursConfig.getMinoConfig().setFoodSource(foodSource.getText());
            MinotaursConfig.getMinoConfig().setEatPercentageBase(Integer.parseInt(baseEatPercentage.getText()));
            MinotaursConfig.getMinoConfig().setEatPercentageVariance(Integer.parseInt(eatPercentageVariance.getText()));
            MinotaursConfig.getMinoConfig().setAttackStyle(attackStyleSelector.getSelectedItem().toString());
            ctx.RunScript();
            dispose();


        });

        exitButton.addActionListener(e -> {
            ScriptManager.getScriptManager().getCurrentScript().stop();
            dispose();
        });

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                ScriptManager.getScriptManager().stop();
            }
        });

        add(settingPanel);

        setVisible(true);


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        foodSourceLabel = new JLabel();
        foodSourceLabel.setText("Food Source:");
        panel1.add(foodSourceLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        foodSource = new JTextField();
        panel1.add(foodSource, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        baseEatLabel = new JLabel();
        baseEatLabel.setText("Base Eat Percentage: ");
        panel1.add(baseEatLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        baseEatPercentage = new JTextField();
        panel1.add(baseEatPercentage, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        varianceLabel = new JLabel();
        varianceLabel.setText("Eat Percentage Variance");
        panel1.add(varianceLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        eatPercentageVariance = new JTextField();
        panel1.add(eatPercentageVariance, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        attackStyleLabel = new JLabel();
        attackStyleLabel.setText("AttackStyle");
        panel1.add(attackStyleLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        attackStyleSelector = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Attack");
        defaultComboBoxModel1.addElement("Strength");
        defaultComboBoxModel1.addElement("Defence");
        attackStyleSelector.setModel(defaultComboBoxModel1);
        panel1.add(attackStyleSelector, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start Script!");
        panel1.add(startButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Exit");
        panel1.add(exitButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }
}
